{"version":3,"file":"index.modern.mjs","sources":["../src/lib/DLLHandler.ts","../src/lib/VoicemeeterConnector.ts","../src/lib/VoicemeeterConsts.ts","../src/index.ts"],"sourcesContent":["import Registry from \"winreg\";\r\n\r\nconst DLLHandler = {\r\n\tgetDLLPath: async (): Promise<any> => {\r\n\t\tconst regKey = new Registry({\r\n\t\t\thive: Registry.HKLM,\r\n\t\t\tkey: \"\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\VB:Voicemeeter {17359A74-1236-5467}\",\r\n\t\t});\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tregKey.values((err: any, items: any) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tthrow new Error(err);\r\n\t\t\t\t}\r\n\t\t\t\tconst unistallerPath = items.find((i: any) => i.name === \"UninstallString\").value;\r\n\t\t\t\tconst fileNameIndex = unistallerPath.lastIndexOf(\"\\\\\");\r\n\t\t\t\tresolve(unistallerPath.slice(0, fileNameIndex));\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n};\r\n\r\nexport default DLLHandler;\r\n","/* eslint-disable no-control-regex */\r\nconst ffi = require(\"@breush/ffi-napi\");\r\nimport refArray from \"ref-array-napi\";\r\nimport DLLHandler from \"./DLLHandler\";\r\nimport { Device, VMLibrary, VoiceMeeterTypes } from \"../types/VoicemeeterTypes\";\r\nimport { BusProperties, StripProperties } from \"./VoicemeeterConsts\";\r\n/**\r\n * @ignore\r\n */\r\nconst CharArray = refArray(\"char\");\r\n/**\r\n * @ignore\r\n */\r\nconst LongArray = refArray(\"long\");\r\n/**\r\n * @ignore\r\n */\r\nconst FloatArray = refArray(\"float\");\r\n/**\r\n * @ignore\r\n */\r\nlet libVM: VMLibrary;\r\n/**\r\n * @ignore\r\n */\r\nlet instance: Voicemeeter;\r\n\r\nexport default class Voicemeeter {\r\n\t/**\r\n\t * Initializes the voice meeter dll connection.\r\n\t * This call is neccessary to use the api. It returns a promise with a VoiceMeeter instance\r\n\t */\r\n\tpublic static async init(): Promise<Voicemeeter> {\r\n\t\tconst dllPath = await DLLHandler.getDLLPath();\r\n\r\n\t\treturn new Promise((resolve: (instance: Voicemeeter) => any) => {\r\n\t\t\tif (!instance) {\r\n\t\t\t\tinstance = new Voicemeeter();\r\n\t\t\t}\r\n\t\t\tlibVM = ffi.Library(`${dllPath}/VoicemeeterRemote64.dll`, {\r\n\t\t\t\tVBVMR_Login: [\"long\", []],\r\n\t\t\t\tVBVMR_Logout: [\"long\", []],\r\n\t\t\t\tVBVMR_RunVoicemeeter: [\"long\", [\"long\"]],\r\n\t\t\t\tVBVMR_IsParametersDirty: [\"long\", []],\r\n\t\t\t\tVBVMR_GetLevel: [\"long\", [\"long\", \"long\", FloatArray]],\r\n\t\t\t\tVBVMR_GetParameterFloat: [\"long\", [CharArray, FloatArray]],\r\n\t\t\t\tVBVMR_GetParameterStringA: [\"long\", [CharArray, CharArray]],\r\n\t\t\t\tVBVMR_SetParameters: [\"long\", [CharArray]],\r\n\t\t\t\tVBVMR_Output_GetDeviceNumber: [\"long\", []],\r\n\t\t\t\tVBVMR_Output_GetDeviceDescA: [\"long\", [\"long\", LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_Input_GetDeviceNumber: [\"long\", []],\r\n\t\t\t\tVBVMR_Input_GetDeviceDescA: [\"long\", [\"long\", LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterType: [\"long\", [LongArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterVersion: [\"long\", [LongArray]],\r\n\t\t\t});\r\n\t\t\tinstance.isInitialised = true;\r\n\t\t\tresolve(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate isInitialised = false;\r\n\tprivate isConnected = false;\r\n\tprivate outputDevices: Device[] = [];\r\n\tprivate inputDevices: Device[] = [];\r\n\tprivate version = \"\";\r\n\tprivate type: VoiceMeeterTypes;\r\n\tprivate eventPool = [] as Array<() => void>;\r\n\tprivate stringParameters = [\"Label\", \"FadeTo\", \"FadeBy\", \"AppGain\", \"AppMute\", \"name\", \"ip\"];\r\n\r\n\t/**\r\n\t * Starts a connection to VoiceMeeter\r\n\t */\r\n\tpublic connect = () => {\r\n\t\tif (!this.isInitialised) {\r\n\t\t\tthrow new Error(\"Await the initialisation before connect\");\r\n\t\t}\r\n\t\tif (this.isConnected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (libVM.VBVMR_Login() === 0) {\r\n\t\t\tthis.isConnected = true;\r\n\t\t\tthis.type = this.getVoicemeeterType();\r\n\t\t\tthis.version = this.getVoicemeeterVersion();\r\n\t\t\tsetInterval(this.checkPropertyChange, 10);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.isConnected = false;\r\n\t\tthrow new Error(\"Connection failed\");\r\n\t};\r\n\r\n\t/**\r\n\t * Getter $outputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $outputDevices(): Device[] {\r\n\t\treturn this.outputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $inputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $inputDevices(): Device[] {\r\n\t\treturn this.inputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $version\r\n\t * @return {string }\r\n\t */\r\n\tpublic get $version(): string {\r\n\t\treturn this.version;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $type\r\n\t * @return {VoiceMeeterTypes}\r\n\t */\r\n\tpublic get $type(): VoiceMeeterTypes {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\t/**\r\n\t * Terminates the connection to VoiceMeeter\r\n\t */\r\n\tpublic disconnect = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (libVM.VBVMR_Logout() === 0) {\r\n\t\t\t\tthis.isConnected = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthrow new Error(\"Disconnect failed\");\r\n\t\t} catch {\r\n\t\t\tthrow new Error(\"Disconnect failed\");\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Updates all input and ouput devices\r\n\t */\r\n\tpublic updateDeviceList = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tthis.outputDevices = [];\r\n\t\tthis.inputDevices = [];\r\n\t\tconst outputDeviceNumber = libVM.VBVMR_Output_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < outputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Output_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.outputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst inputDeviceNumber = libVM.VBVMR_Input_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < inputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Input_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.inputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns wheter a parameter has been changed\r\n\t */\r\n\tpublic isParametersDirty = () => {\r\n\t\treturn libVM.VBVMR_IsParametersDirty();\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a bus parameter.\r\n\t * @param  {number} index Index of the bus\r\n\t * @param  {BusProperties} property Property which should be get\r\n\t */\r\n\r\n\tpublic getBusParameter = (index: number, property: BusProperties) => {\r\n\t\treturn this.getParameter(\"Bus\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a strip parameter\r\n\t * @param  {number} index Index of the strip\r\n\t * @param  {StripProperties} property Property which should be get\r\n\t */\r\n\tpublic getStripParameter = (index: number, property: StripProperties) => {\r\n\t\treturn this.getParameter(\"Strip\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a strip.\r\n\t * @param  {number} index Strip number\r\n\t * @param  {StripProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setStripParameter = (index: number, property: StripProperties, value: any) => {\r\n\t\treturn this.setParameter(\"Strip\", index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a bus.\r\n\t * @param  {number} index Bus number\r\n\t * @param  {StripProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setBusParameter = (index: number, property: BusProperties, value: any) => {\r\n\t\treturn this.setParameter(\"Bus\", index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * @param  {()=>any} fn Function which should be called if something changes\r\n\t */\r\n\tpublic attachChangeEvent = (fn: () => any) => {\r\n\t\tthis.eventPool.push(fn);\r\n\t};\r\n\t/**\r\n\t * @param parameterName Name of the parameter that should be get\r\n\t * @returns {any} Parameter value\r\n\t */\r\n\tpublic getOption = (parameterName: string) => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not correct connected \");\r\n\t\t}\r\n\t\tconst hardwareIdPtr = Buffer.alloc(parameterName.length + 1);\r\n\t\thardwareIdPtr.write(parameterName);\r\n\t\tlet namePtr = null;\r\n\t\t// Some parameters return string values and require some post-processing, this checks for those parameters\r\n\t\tif (this.stringParameters.some((str) => parameterName.includes(str))) {\r\n\t\t\tnamePtr = new CharArray(512);\r\n\t\t\tlibVM.VBVMR_GetParameterStringA(hardwareIdPtr, namePtr);\r\n\t\t\treturn String.fromCharCode\r\n\t\t\t\t.apply(null, namePtr)\r\n\t\t\t\t.split(\"\")\r\n\t\t\t\t.filter((e: string) => {\r\n\t\t\t\t\treturn e !== \"\\0\";\r\n\t\t\t\t})\r\n\t\t\t\t.join(\"\");\r\n\t\t}\r\n\t\tnamePtr = new FloatArray(1);\r\n\t\tlibVM.VBVMR_GetParameterFloat(hardwareIdPtr, namePtr);\r\n\t\treturn namePtr[0];\r\n\t};\r\n\t/**\r\n\t * Sets an option.\r\n\t * @param {string} option Option to set\r\n\t */\r\n\tpublic setOption = (option: string) => {\r\n\t\tconst script = Buffer.alloc(option.length + 1);\r\n\t\tscript.fill(0).write(option);\r\n\t\tlibVM.VBVMR_SetParameters(script);\r\n\t\treturn new Promise((resolve) => setTimeout(resolve, 200));\r\n\t};\r\n\r\n\t/**\r\n\t * Checks whether properties has been changed and calls all event listeners\r\n\t */\r\n\tprivate checkPropertyChange = () => {\r\n\t\tif (this.isParametersDirty() === 1) {\r\n\t\t\tthis.eventPool.forEach((eventListener) => {\r\n\t\t\t\teventListener();\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Gets installed voicemeeter type.\r\n\t * Means Voicemeeter(normal,banana,potato)\r\n\t */\r\n\tprivate getVoicemeeterType = (): VoiceMeeterTypes => {\r\n\t\tconst typePtr = new LongArray(1);\r\n\t\tif (libVM.VBVMR_GetVoicemeeterType(typePtr) !== 0) {\r\n\t\t\tthrow new Error(\"running failed\");\r\n\t\t}\r\n\t\tswitch (typePtr[0]) {\r\n\t\t\tcase 1: // Voicemeeter\r\n\t\t\t\treturn \"voicemeeter\";\r\n\t\t\tcase 2: // Voicemeeter Banana\r\n\t\t\t\treturn \"voicemeeterBanana\";\r\n\t\t\tcase 3: // Voicemeeter Potato\r\n\t\t\t\treturn \"voicemeeterPotato\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Voicemeeter seems not to be installed\");\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the installed voicemeeter version\r\n\t */\r\n\tprivate getVoicemeeterVersion = () => {\r\n\t\tconst versionPtr = new LongArray(1) as any;\r\n\t\tif (libVM.VBVMR_GetVoicemeeterVersion(versionPtr) !== 0) {\r\n\t\t\tthrow new Error(\"running failed\");\r\n\t\t}\r\n\t\treturn versionPtr;\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a parameter of voicemeeter\r\n\t * @param  {'Strip'|'Bus'} selector Strip or Bus\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties} property Property which should be read\r\n\t */\r\n\tprivate getParameter = (selector: \"Strip\" | \"Bus\", index: number, property: StripProperties | BusProperties) => {\r\n\t\tconst parameterName = `${selector}[${index}].${property}`;\r\n\t\treturn this.getOption(parameterName);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a bus or Strip\r\n\t * @param  {'Strip'|'Bus'} selector\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tprivate setParameter = (\r\n\t\tselector: \"Strip\" | \"Bus\",\r\n\t\tindex: number,\r\n\t\tproperty: StripProperties | BusProperties,\r\n\t\tvalue: any\r\n\t): Promise<any> => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tconst scriptString = `${selector}[${index}].${property}=${value};`;\r\n\t\treturn this.setOption(scriptString);\r\n\t};\r\n\t/**\r\n\t * Gets realtime audio level see the VoicemeeterRemote API: [VoicemeeterRemote.h GetLevel](https://github.com/mirror/equalizerapo/blob/7aece1b788fce5aa11873f3842a0d01f7c78454b/VoicemeeterClient/VoicemeeterRemote.h#L284),\r\n\t * for more details about the parameters\r\n\t * @param {0|1|2|3} type 0 = pre fader input levels. 1 = post fader input levels. 2= post Mute input levels. 3= output levels\r\n\t * @param channel audio channel zero based index\r\n\t * @returns {float} Current audio level\r\n\t */\r\n\tpublic getLevel = (type: 0 | 1 | 2 | 3, channel: number) => {\r\n\t\tconst levelPtr = new FloatArray(1);\r\n\t\tlibVM.VBVMR_GetLevel(type, channel, levelPtr);\r\n\t\treturn levelPtr[0];\r\n\t};\r\n}\r\n","export const InterfaceTypes = {\r\n\tstrip: 0,\r\n\tbus: 1,\r\n};\r\n\r\nexport enum StripProperties {\r\n\tMono = \"Mono\",\r\n\tMute = \"Mute\",\r\n\tSolo = \"Solo\",\r\n\tMC = \"MC\",\r\n\tGain = \"Gain\",\r\n\tPan_x = \"Pan_x\",\r\n\tPan_y = \"Pan_y\",\r\n\tColor_x = \"Color_x\",\r\n\tColor_y = \"Color_y\",\r\n\tfx_x = \"fx_x\",\r\n\tfx_y = \"fx_y\",\r\n\tAudibility = \"Audibility\",\r\n\tComp = \"Comp\",\r\n\tGate = \"Gate\",\r\n\tEqGain1 = \"EqGain1\",\r\n\tEqGain2 = \"EqGain2\",\r\n\tEqGain3 = \"EqGain3\",\r\n\tLabel = \"Label\",\r\n\tA1 = \"A1\",\r\n\tA2 = \"A2\",\r\n\tA3 = \"A3\",\r\n\tA4 = \"A4\",\r\n\tA5 = \"A5\",\r\n\tB1 = \"B1\",\r\n\tB2 = \"B2\",\r\n\tB3 = \"B3\",\r\n\tFadeTo = \"FadeTo\",\r\n}\r\nexport enum BusProperties {\r\n\tMono = \"Mono\",\r\n\tMute = \"Mute\",\r\n\tEQ = \"EQ.on\",\r\n\tGain = \"Gain\",\r\n\tNormalMode = \"mode.normal\",\r\n\tAmixMode = \"mode.Amix\",\r\n\tBmixMode = \"mode.Bmix\",\r\n\tRepeatMode = \"mode.Repeat\",\r\n\tCompositeMode = \"mode.Composite\",\r\n\tFadeTo = \"FadeTo\",\r\n\tLabel = \"Label\"\r\n}\r\n","import Voicemeeter from \"./lib/VoicemeeterConnector\";\r\nimport * as constants from \"./lib/VoicemeeterConsts\";\r\nimport * as types from \"./types/VoicemeeterTypes\";\r\n\r\nconst { BusProperties, InterfaceTypes, StripProperties } = constants;\r\n\r\nexport { Voicemeeter, BusProperties, InterfaceTypes, StripProperties, types };\r\n"],"names":["ffi","require","CharArray","refArray","LongArray","FloatArray","libVM","instance","Voicemeeter","constructor","this","isInitialised","isConnected","outputDevices","inputDevices","version","type","eventPool","stringParameters","connect","Error","VBVMR_Login","getVoicemeeterType","getVoicemeeterVersion","setInterval","checkPropertyChange","disconnect","VBVMR_Logout","_unused","updateDeviceList","outputDeviceNumber","VBVMR_Output_GetDeviceNumber","i","hardwareIdPtr","namePtr","typePtr","VBVMR_Output_GetDeviceDescA","push","name","String","fromCharCode","toArray","replace","hardwareId","inputDeviceNumber","VBVMR_Input_GetDeviceNumber","VBVMR_Input_GetDeviceDescA","isParametersDirty","VBVMR_IsParametersDirty","getBusParameter","index","property","getParameter","getStripParameter","setStripParameter","value","setParameter","setBusParameter","attachChangeEvent","fn","getOption","parameterName","Buffer","alloc","length","write","some","str","includes","VBVMR_GetParameterStringA","apply","split","filter","e","join","VBVMR_GetParameterFloat","setOption","option","script","fill","VBVMR_SetParameters","Promise","resolve","setTimeout","forEach","eventListener","VBVMR_GetVoicemeeterType","versionPtr","VBVMR_GetVoicemeeterVersion","selector","getLevel","channel","levelPtr","VBVMR_GetLevel","init","dllPath","async","regKey","Registry","hive","HKLM","key","values","err","items","unistallerPath","find","fileNameIndex","lastIndexOf","slice","DLLHandler","Library","VBVMR_RunVoicemeeter","$outputDevices","$inputDevices","$version","$type","StripProperties","BusProperties","strip","bus","InterfaceTypes","constants"],"mappings":"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"}